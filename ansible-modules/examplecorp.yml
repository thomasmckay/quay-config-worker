---
- hosts: all
  gather_facts: no
  tasks:
    # D A T A B A S E
    #
    - name: Validate Database
      tags: [all, database]
      quay_database:
        state: present
      register: params
    - name: Upload Database
      tags: [all, database, reset]
      uri:
        url: "{{ quay_url }}/database"
        # This doesn't work
        # client_cert: /home/thomasmckay/code/tmp/ssl.cert
        # client_key: /home/thomasmckay/code/tmp/ssl.key
        validate_certs: no
        method: POST
        headers:
          Content-Type: "application/json"
        body: "{{ params }}"
        body_format: json
      register: result

    # U S E R
    #
    - name: Users
      quay_user:
        username: "{{ item }}"
        password: changeme
        email: "{{ item }}@examplecorp.com"
      loop:
        - developer
      register: params
    - name: Upload Users
      uri:
        url: "{{ quay_url }}/user"
        validate_certs: no
        method: POST
        headers:
          Content-Type: "application/json"
        body: "{{ params }}"
        body_format: json
      register: result

    # O R G A N I Z A T I O N
    #
    - name: Organizations
      tags: [all, organizations]
      quay_organization:
        name: "{{ item }}"
        user: developer
        email: "developer+{{ item }}@examplecorp.com"
      loop:
        - examplecorp
        - acmecorp
      register: params
    - name: Upload Organizations
      tags: [all, organizations]
      uri:
        url: "{{ quay_url }}/organization"
        validate_certs: no
        method: POST
        headers:
          Content-Type: "application/json"
        body: "{{ params }}"
        body_format: json
      register: result

    # T E A M
    #
    - name: Teams
      quay_team:
        name: "{{ item }}"
        user: developer
        organization: examplecorp
        role: creator
        description: Example Corp. Developers
      loop:
        - developers
      register: params
    - name: Upload Teams
      uri:
        url: "{{ quay_url }}/team"
        validate_certs: no
        method: POST
        headers:
          Content-Type: "application/json"
        body: "{{ params }}"
        body_format: json
      register: result


    # R E P O S I T O R I E S
    #
    - name: Repositories
      tags: [all, repositories]
      quay_repository:
        user: developer
        public: false
        name: "{{ item }}"
      loop:
        - "alpine"
      register: params
    - name: Upload Repositories
      tags: [all, repositories]
      uri:
        url: "{{ quay_url }}/repository"
        validate_certs: no
        method: POST
        headers:
          Content-Type: "application/json"
        body: "{{ params }}"
        body_format: json
      register: result

    # S K O P E O
    #
    - name: Skopeo
      tags: [all, skopeo]
      quay_skopeo:
        user: developer
        password: changeme
        password: "UwaGGnYewHscZyhXc+4lPTT+UlUN/UQ67My8kH+cXDLP8mySB6xltMSWJtGULRZI"
        project: "{{ item.project }}"
        repository: "{{ item.repository }}"
        tag: "{{ item.tag }}"
        src_image: "{{ item.src_image }}"
        src_tag: "{{ item.src_tag }}"
      register: params
      with_items:
        - { project: developer, repository: alpine, tag: latest, src_image: docker.io/alpine, src_tag: latest }
        - { project: developer, repository: alpine, tag: 3.9, src_image: docker.io/alpine, src_tag: 3.9 }
        - { project: developer, repository: alpine, tag: 3.8, src_image: docker.io/alpine, src_tag: 3.8 }
        - { project: developer, repository: alpine, tag: 3.7, src_image: docker.io/alpine, src_tag: 3.7 }
    - name: Upload Skopeo
      tags: [all, skopeo]
      uri:
        url: "{{ quay_url }}/skopeo"
        validate_certs: no
        method: POST
        headers:
          Content-Type: "application/json"
        body: "{{ params }}"
        body_format: json
      register: result

    # S K O P E O   W O R K   Q U E U E
    #
    - name: Skopeo to Work Queue
      tags: [all, work_queue]
      quay_skopeo:
        work_queue: true
        user: developer
        password: changeme
        project: "{{ item.project }}"
        repository: "{{ item.repository }}"
        tag: "{{ item.tag }}"
        src_image: "{{ item.src_image }}"
        src_tag: "{{ item.src_tag }}"
      register: params
      with_items:
        - { project: developer, repository: alpine, tag: latest, src_image: docker.io/alpine, src_tag: latest }
        - { project: developer, repository: alpine, tag: 3.9, src_image: docker.io/alpine, src_tag: 3.9 }
        - { project: developer, repository: alpine, tag: 3.8, src_image: docker.io/alpine, src_tag: 3.8 }
        - { project: developer, repository: alpine, tag: 3.7, src_image: docker.io/alpine, src_tag: 3.7 }
    - name: Upload Skopeo to Work Queue
      tags: [all, work_queue]
      uri:
        url: "{{ quay_url }}/skopeo"
        validate_certs: no
        method: POST
        headers:
          Content-Type: "application/json"
        body: "{{ params }}"
        body_format: json
      register: result

    # # I M A G E
    # #
    # - name: Images
    #   tags: [all, images]
    #   quay_image:
    #     project: developer
    #     repository: alpine
    #     image_id: developer/alpine/1
    #   register: params
    # - name: Upload Images
    #   tags: [all, images]
    #   uri:
    #     url: "{{ quay_url }}/image"
    #     validate_certs: no
    #     method: POST
    #     headers:
    #       Content-Type: "application/json"
    #     body: "{{ params }}"
    #     body_format: json
    #   register: result

    # # T A G
    # #
    # - name: Tags
    #   tags: [all, tags]
    #   quay_tag:
    #     project: developer
    #     repository: alpine
    #     image_id: developer/alpine/1
    #     name: "{{ item }}"
    #   loop:
    #     - "latest"
    #   register: params
    # - name: Upload Tags
    #   tags: [all, tags]
    #   uri:
    #     url: "{{ quay_url }}/tag"
    #     validate_certs: no
    #     method: POST
    #     headers:
    #       Content-Type: "application/json"
    #     body: "{{ params }}"
    #     body_format: json
    #   register: result
