---
- hosts: all
  gather_facts: no
  tasks:
    # D A T A B A S E
    #
    # - name: Validate Database
    #   tags: [database]
    #   quay_database:
    #     state: present
    #   register: params
    # - name: Upload Database
    #   tags: [database, reset]
    #   uri:
    #     url: "{{ quay_url }}/database"
    #     # This doesn't work
    #     # client_cert: /home/thomasmckay/code/tmp/ssl.cert
    #     # client_key: /home/thomasmckay/code/tmp/ssl.key
    #     validate_certs: no
    #     method: POST
    #     headers:
    #       Content-Type: "application/json"
    #     body: "{{ params }}"
    #     body_format: json
    #   register: result

    # U S E R
    #
    - name: Users
      tags: [all, users]
      quay_user:
        username: "{{ item }}"
        password: changeme
        email: "{{ item }}@examplecorp.com"
      loop:
        - developer
      register: params
    - name: Upload Users
      tags: [all, users]
      uri:
        url: "{{ quay_url }}/user"
        validate_certs: no
        method: POST
        headers:
          Content-Type: "application/json"
        body: "{{ params }}"
        body_format: json
      register: result

    # O R G A N I Z A T I O N
    #
    - name: Organizations
      tags: [all, organizations]
      quay_organization:
        name: "{{ item }}"
        user: developer
        email: "developer+{{ item }}@examplecorp.com"
      loop:
        - examplecorp
        - acmecorp
      register: params
    - name: Upload Organizations
      tags: [all, organizations]
      uri:
        url: "{{ quay_url }}/organization"
        validate_certs: no
        method: POST
        headers:
          Content-Type: "application/json"
        body: "{{ params }}"
        body_format: json
      register: result

    # ???? broken
    # # T E A M
    # #
    # - name: Teams
    #   tags: [all, teams]
    #   quay_team:
    #     name: "{{ item }}"
    #     user: developer
    #     organization: examplecorp
    #     role: creator
    #     description: Example Corp. Developers
    #   loop:
    #     - developers
    #   register: params
    # - name: Upload Teams
    #   tags: [all, teams]
    #   uri:
    #     url: "{{ quay_url }}/team"
    #     validate_certs: no
    #     method: POST
    #     headers:
    #       Content-Type: "application/json"
    #     body: "{{ params }}"
    #     body_format: json
    #   register: result


    # R E P O S I T O R I E S
    #
    - name: Repositories
      tags: [all, repositories]
      quay_repository:
        user: "{{ item.user }}"
        public: "{{ item.public }}"
        name: "{{ item.name }}"
        mode: "{{ item.mode }}"
      loop:
        - {mode: NORMAL, user: developer, name: "alpine", public: false}
        - {mode: MIRROR, user: admin, name: "sample", public: false}
        - {mode: MIRROR, user: admin, name: "sample-three", public: false}
        - {mode: MIRROR, user: admin, name: "ubi7", public: true}
        - {mode: MIRROR, user: admin, name: "registry-redhat-io-ubi7", public: true}
        - {mode: MIRROR, user: admin, name: "shadowbox", public: true}
        - {mode: MIRROR, user: admin, name: "staging-shadowbox", public: true}
      register: params
    - name: Upload Repositories
      tags: [all, repositories]
      uri:
        url: "{{ quay_url }}/repository"
        validate_certs: no
        method: POST
        headers:
          Content-Type: "application/json"
        body: "{{ params }}"
        body_format: json
      register: result

    # # S K O P E O
    # #
    # - name: Skopeo
    #   tags: [all, skopeo]
    #   quay_skopeo:
    #     user: developer
    #     password: changeme
    #     project: "{{ item.project }}"
    #     repository: "{{ item.repository }}"
    #     tag: "{{ item.tag }}"
    #     src_image: "{{ item.src_image }}"
    #     src_tag: "{{ item.src_tag }}"
    #   register: params
    #   with_items:
    #     - { project: developer, repository: alpine, tag: latest, src_image: docker.io/alpine, src_tag: latest }
    #     - { project: developer, repository: alpine, tag: 3.9, src_image: docker.io/alpine, src_tag: 3.9 }
    #     - { project: developer, repository: alpine, tag: 3.8, src_image: docker.io/alpine, src_tag: 3.8 }
    #     - { project: developer, repository: alpine, tag: 3.7, src_image: docker.io/alpine, src_tag: 3.7 }
    # - name: Upload Skopeo
    #   tags: [all, skopeo]
    #   uri:
    #     url: "{{ quay_url }}/skopeo"
    #     validate_certs: no
    #     method: POST
    #     headers:
    #       Content-Type: "application/json"
    #     body: "{{ params }}"
    #     body_format: json
    #   register: result

    # # S K O P E O   W O R K   Q U E U E
    # #
    # - name: Skopeo to Work Queue
    #   tags: [all, work_queue]
    #   quay_skopeo:
    #     work_queue: true
    #     user: developer
    #     password: changeme
    #     project: "{{ item.project }}"
    #     repository: "{{ item.repository }}"
    #     tag: "{{ item.tag }}"
    #     src_image: "{{ item.src_image }}"
    #     src_tag: "{{ item.src_tag }}"
    #   register: params
    #   with_items:
    #     - { project: developer, repository: alpine, tag: latest, src_image: docker.io/alpine, src_tag: latest }
    #     - { project: developer, repository: alpine, tag: 3.9, src_image: docker.io/alpine, src_tag: 3.9 }
    #     - { project: developer, repository: alpine, tag: 3.8, src_image: docker.io/alpine, src_tag: 3.8 }
    #     - { project: developer, repository: alpine, tag: 3.7, src_image: docker.io/alpine, src_tag: 3.7 }
    # - name: Upload Skopeo to Work Queue
    #   tags: [all, work_queue]
    #   uri:
    #     url: "{{ quay_url }}/skopeo"
    #     validate_certs: no
    #     method: POST
    #     headers:
    #       Content-Type: "application/json"
    #     body: "{{ params }}"
    #     body_format: json
    #   register: result

    # # I M A G E
    # #
    # - name: Images
    #   tags: [all, images]
    #   quay_image:
    #     project: developer
    #     repository: alpine
    #     image_id: developer/alpine/1
    #   register: params
    # - name: Upload Images
    #   tags: [all, images]
    #   uri:
    #     url: "{{ quay_url }}/image"
    #     validate_certs: no
    #     method: POST
    #     headers:
    #       Content-Type: "application/json"
    #     body: "{{ params }}"
    #     body_format: json
    #   register: result

    # # T A G
    # #
    # - name: Tags
    #   tags: [all, tags]
    #   quay_tag:
    #     project: developer
    #     repository: alpine
    #     image_id: developer/alpine/1
    #     name: "{{ item }}"
    #   loop:
    #     - "latest"
    #   register: params
    # - name: Upload Tags
    #   tags: [all, tags]
    #   uri:
    #     url: "{{ quay_url }}/tag"
    #     validate_certs: no
    #     method: POST
    #     headers:
    #       Content-Type: "application/json"
    #     body: "{{ params }}"
    #     body_format: json
    #   register: result

    # R E P O S I T O R Y   M I R R O R S
    #
    - name: Repository Mirrors
      tags: [all, repository-mirrors]
      quay_repo_mirror:
        user: admin
        password: changeme
        external_user: "{{ item.external_user }}"
        external_password: "{{ item.external_password }}"
        external_reference: "{{ item.external_reference }}"
        external_tag: "{{ item.external_tag }}"
        internal_robot: "{{ item.internal_robot }}"
        internal_namespace: "{{ item.internal_namespace }}"
        internal_repository: "{{ item.internal_repository }}"
        sync_interval: "{{ item.sync_interval }}"
        sync_start_date: "{{ item.sync_start_date }}"
        is_enabled: "{{ item.is_enabled }}"
      register: params
      with_items:
        - {
          external_user: "",
          external_password: "",
          external_reference: "thomasmckay.usersys.redhat.com:8443/admin/centos",
          external_tag: "7,7.1*",
          internal_robot: admin+mirror,
          internal_namespace: admin,
          internal_repository: sample,
          sync_start_date: now,
          sync_interval: 3000,
          is_enabled: true
          }
        - {
          external_user: "",
          external_password: "",
          external_reference: "thomasmckay.usersys.redhat.com:8443/admin/centos",
          external_tag: "7,8,9",
          internal_robot: admin+mirror,
          internal_namespace: admin,
          internal_repository: "sample-three",
          sync_start_date: "now",
          sync_interval: 3000,
          is_enabled: true
          }
        - {
          external_user: "",
          external_password: "",
          external_reference: "registry.access.redhat.com/ubi7/ubi",
          external_tag: "7.6*",
          internal_robot: admin+mirror,
          internal_namespace: admin,
          internal_repository: "ubi7",
          sync_start_date: "now",
          sync_interval: 3000,
          is_enabled: true
          }
        - {
          external_user: "",
          external_password: "",
          external_reference: "registry.redhat.io/ubi7/ubi",
          external_tag: "7.6*",
          internal_robot: admin+mirror,
          internal_namespace: admin,
          internal_repository: "registry-redhat-io-ubi7",
          sync_start_date: "now",
          sync_interval: 3000,
          is_enabled: true
          }
        - {
          external_user: "",
          external_password: "",
          external_reference: "quay.io/outline/shadowbox",
          external_tag: "daily,daily-2019-07-3*,daily-2019-08-*",
          internal_robot: admin+mirror,
          internal_namespace: admin,
          internal_repository: "shadowbox",
          sync_start_date: "now",
          sync_interval: 3000,
          is_enabled: true
          }
        - {
          external_user: "",
          external_password: "",
          external_reference: "staging.quay.io/outline/shadowbox",
          external_tag: "daily,daily-2019-08-*",
          internal_robot: admin+mirror,
          internal_namespace: admin,
          internal_repository: "staging-shadowbox",
          sync_start_date: "now",
          sync_interval: 3000,
          is_enabled: false
          }
    - name: Upload Repository Mirrors
      tags: [all, repository-mirrors]
      uri:
        url: "{{ quay_url }}/repo_mirror"
        validate_certs: no
        method: POST
        headers:
          Content-Type: "application/json"
        body: "{{ params }}"
        body_format: json
      register: result
